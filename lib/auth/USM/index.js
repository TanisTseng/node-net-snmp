var Constants = require("../constants");
var Exceptions = require("../exceptions");
var TimeWindow = require("../TimeWindow");
var UsmSecurityParameters = require("./usm-security-parameters");

var USM = function(session, options) {
    this.session = session;

    if (!options.SecurityName)
        throw new Error('Expected username for the User-based Security Model - none provided.');

    // 3.2 with default no privacy
    if (!this.securityLevel & Constants.BitwiseFlags.Priv) {
        options.privParams = {
            type: 'plain',
            key: undefined
        };
    } else if (!options.privParams) {
        throw new Error('Privacy requested, without privacy parameters!');
    } else if (Constants.PrivTypes.indexOf(options.privParams.type) === -1) {
        throw new Exceptions.UnsupportedSecurityLevel(
            'Unsupported Privacy type: "' + options.privParams.type + '"'
        );
    }

    // 3.3
    if (Constants.AuthTypes.indexOf(options.authParams) === -1) {
        throw new Exceptions.UnsupportedSecurityLevel(
            'Unsupported Authentication type: "' + options.authParams + '"'
        );
    }

    this.securityEngineId = options.securityEngineId;
    this.securityName = options.securityName;
    this.securityLevel = options.securityLevel;
};

USM.prototype.generateRequestMessage = function(scopedPDU) {
    return this.generateResponseMessage(scopedPDU, null);
};

USM.prototype.generateResponseMessage = function(scopedPDU, securityStateReference) {
    var securityParameters = new UsmSecurityParameters,
        must_encrypt = this.securityLevel & Constants.BitwiseFlags.Priv,
        must_authenticate = this.securityLevel & Constants.BitwiseFlags.Auth;

    if (securityStateReference !== null) {
        // securityStateReference not checked as we are not responding to a request
        //  If we were responding to a request, securityStateReference would refer
        //  to the cached data generated by this module when processing the
        //  incoming message.                   --- 3.1.1(a)
        throw new Error("Not implemented");
    } else {
        
    }

    // 3.4 - encryption
    if (must_encrypt) {
        scopedPDU = this._performEncryption(scopedPDU, securityParameters);
    }

    // 3.5
    securityParameters.msgAuthoritativeEngineId = this.engineId;

    // 3.6
    if (must_authenticate) {
        // 3.6(a) - Authenticate
        securityParameters.msgAuthoritativeEngineBoots = this.timeWindow.getBoots();
        securityParameters.msgAuthoritativeEngineTime  = this.timeWindow.getTime();
    } else if (this.securityStateReference !== null) {
        // 3.6(b) - Response
        // use local engine time and boots
    } else {
        // 3.6(c) - Request
        securityParameters.msgAuthoritativeEngineBoots = 0;
        securityParameters.msgAuthoritativeEngineTime  = 0;
    }

    // 3.7
    securityParameters.msgUserName = this.username;

    // 3.8 - authentication
    if (must_authenticate) {
        // 3.8(a)
        this._performAuthentication(securityParameters);
    } else {
        // 3.8(b)
        securityParameters.msgAuthenticationParameters = '';
    }

    return true;
};

USM.prototype._localizeKey = function() {
    // password?
    // Ku = password
    // Kul = {Ku}{EngineID}{Ku}
    // find auth protocol for user@engine (MD5/SHA1)
    // return auth->hash(Kul)
};

USM.prototype._performEncryption = function(scopedPDU, securityParameters) {
    switch (this.priv.type) {
        // ..
    }

    // ->                                       key,       pdu
    var encryption = new this[encryptionModule](this.priv, scopedPDU);

    if (!encryption.statusInformation) {
        throw new Exceptions.EncryptionError("The encryption mechanism failed.");
    }

    securityParameters.msgPrivacyParameters = encryption.privParameters;
    return encryption.encryptedData;
};

USM.prototype._performAuthentication = function(securityParameters, scopedPDU) {
    var auth = this;

    var params = auth.authenticateOutgoingMsg(this.auth.key, scopedPDU);

    if (!auth.statusInformation) {
        throw new Exceptions.AuthenticationFailure("The message could not be authenticated.");
    }

    securityParameters.msgAuthenticationParameters = authentication.authenticatedWholeMsg;
};

module.exports = USM;
