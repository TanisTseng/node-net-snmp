var Constants = require("../constants");
var Exceptions = require("../exceptions");
var TimeWindow = require("../TimeWindow");
var UsmSecurityParameters = require("./usm-security-parameters");

var USM = function(options) {
    this.engineId = options.engineId;
    this.timeWindow = new TimeWindow(this.engineId);
    this.timeWindow.update(options.boots, options.time);

    if (!options.username)
        throw new Error('Expected username for the User-based Security Model - none provided.');

    if (Constants.AuthTypes.indexOf(options.authParams) === -1) {
        throw new Exceptions.UnsupportedSecurityLevel(
            'Unsupported Authentication type: "' + options.authParams + '"'
        );
    }

    if (!options.privParams) {
        options.privParams = {
            type: 'plain',
            key: undefined
        };
    } else if (Constants.PrivTypes.indexOf(options.privParams) === -1) {
        throw new Exceptions.UnsupportedSecurityLevel(
            'Unsupported Privacy type: "' + options.privParams + '"'
        );
    }

    this.username = options.username;
    this.auth = options.authParams;
    this.priv = options.privParams;
};

USM.prototype.generateRequestMessage = function(buffer, message)
    var securityParameters = new UsmSecurityParameters;

    // securityStateReference not checked as we are not responding to a request
    //  If we were responding to a request, securityStateReference would refer
    //  to the cached data generated by this module when processing the
    //  incoming message.                   --- 3.1.1(a)

    // 3.5
    securityParameters.msgAuthoritativeEngineId = this.engineId;
    // 3.6.a
    securityParameters.msgAuthoritativeEngineBoots = this.timeWindow.getBoots();
    securityParameters.msgAuthoritativeEngineTime  = this.timeWindow.getTime();

    switch (this.priv.type) {
        case 'plain':
            encryptionModule = 'plaintext';
            break;
    }

    //                                          key,                pdu
    var encryption = new this[encryptionModule](options.authParams, message);

    if (!encryption.statusInformation) {
        throw new Exceptions.EncryptionError("The encryption mechanism failed.");
    }

    
};

module.exports = USM;
